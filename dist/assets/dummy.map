{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/ember-cli-filter-by-query/tests/modules/ember-cli-filter-by-query/index.jshint.js","dummy/ember-cli-filter-by-query/tests/modules/ember-cli-filter-by-query/util/filter.jshint.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/tests/app.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/computed-filter-by-query-test.js","dummy/tests/unit/computed-filter-by-query-test.jshint.js","dummy/tests/unit/filter-by-query-test.js","dummy/tests/unit/filter-by-query-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/ember-cli-filter-by-query/tests/modules/ember-cli-filter-by-query/index.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-cli-filter-by-query\");\n  test(\"modules/ember-cli-filter-by-query/index.js should pass jshint\", function () {\n    ok(true, \"modules/ember-cli-filter-by-query/index.js should pass jshint.\");\n  });\n\n});","define('dummy/ember-cli-filter-by-query/tests/modules/ember-cli-filter-by-query/util/filter.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-cli-filter-by-query/util\");\n  test(\"modules/ember-cli-filter-by-query/util/filter.js should pass jshint\", function () {\n    ok(true, \"modules/ember-cli-filter-by-query/util/filter.js should pass jshint.\");\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Welcome to Ember.js\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/computed-filter-by-query-test', ['ember', 'ember-cli-filter-by-query', 'ember-qunit', 'qunit'], function (Ember, computedFilterByQuery, ember_qunit, qunit) {\n\n  'use strict';\n\n  var Type, obj, germany, algeria, nigeria;\n  var france, russia, mexico, somalia, brittain;\n  qunit.module(\"computed property test\", {\n    beforeEach: function beforeEach() {\n      Type = Ember['default'].Object.extend({\n        foo: computedFilterByQuery['default'](\"list\", \"country\", \"query\"),\n        bar: computedFilterByQuery['default'](\"list\", \"continent\", \"query\"),\n        baz: computedFilterByQuery['default'](\"list\", [\"continent\", \"country\"], \"query\") });\n\n      germany = Ember['default'].Object.create({\n        country: \"Germany\",\n        capital: \"Berlin\",\n        continent: \"Europe\"\n      });\n\n      algeria = Ember['default'].Object.create({\n        country: \"Algeria\",\n        capital: \"Algiers\",\n        continent: \"Africa\"\n      });\n\n      nigeria = Ember['default'].Object.create({\n        country: \"Nigeria\",\n        capital: \"Abuja\",\n        continent: \"Africa\"\n      });\n\n      france = Ember['default'].Object.create({\n        country: \"France\",\n        capital: \"Paris\",\n        continent: \"Europe\"\n      });\n\n      russia = Ember['default'].Object.create({\n        country: \"Russia\",\n        capital: \"Moscow\",\n        continent: \"Europe/Asia\"\n      });\n\n      mexico = Ember['default'].Object.create({\n        country: \"Mexico\",\n        capital: \"Mexico City\",\n        continent: \"North America\"\n      });\n\n      somalia = Ember['default'].Object.create({\n        country: \"Somalia\",\n        capital: \"Mogadishu\",\n        continent: \"Africa\"\n      });\n\n      brittain = Ember['default'].Object.create({\n        country: \"Great Brittain\",\n        capital: \"London\",\n        continent: \"Europe\"\n      });\n\n      obj = Type.create({\n        list: [brittain, germany, algeria, nigeria, somalia, mexico, russia, france]\n      });\n    }\n  });\n\n  ember_qunit.test(\"it filters a list\", function (assert) {\n    assert.expect(3);\n\n    obj.set(\"query\", \"ger\");\n    assert.deepEqual(obj.get(\"foo\"), [germany, algeria, nigeria], \"it only includes matches\");\n\n    obj.set(\"query\", \"europe\");\n    assert.deepEqual(obj.get(\"bar.length\"), 4, \"filters case insensitive\");\n\n    obj.set(\"query\", \"ri\");\n    assert.deepEqual(obj.get(\"baz.length\"), 5, \"respects property key order\");\n  });\n\n});","define('dummy/tests/unit/computed-filter-by-query-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/computed-filter-by-query-test.js should pass jshint', function() { \n    ok(true, 'unit/computed-filter-by-query-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/filter-by-query-test', ['ember-cli-filter-by-query/util/filter', 'ember-qunit', 'qunit'], function (filterByQuery, ember_qunit, qunit) {\n\n  'use strict';\n\n  var array;\n\n  qunit.module(\"utility function test\");\n\n  ember_qunit.test(\"filters with \\\"or\\\" conjunction\", function (assert) {\n    var input, output;\n    assert.expect(1);\n\n    input = [{ id: 1, foo: \"psopao\", bar: \"opoko\" }, { id: 2, foo: \"aapoko\", bar: \"aaa\" }, { id: 3, foo: \"prsss\", bar: \"aa\" }];\n\n    output = filterByQuery['default'](input, [\"foo\", \"bar\"], \"po aa\", { conjunction: \"or\" });\n    assert.deepEqual(output, [input[1], input[2], input[0]]);\n  });\n\n  ember_qunit.test(\"filters with \\\"and\\\" conjunction\", function (assert) {\n    var input, output;\n    assert.expect(1);\n\n    input = [{ id: 1, foo: \"psopao\", bar: \"opoko\" }, { id: 2, foo: \"aapoko\", bar: \"aaa\" }, { id: 3, foo: \"prsss\", bar: \"aa\" }];\n\n    output = filterByQuery['default'](input, [\"foo\", \"bar\"], \"po aa\", { conjunction: \"and\" });\n    assert.deepEqual(output, [input[1]]);\n  });\n\n});","define('dummy/tests/unit/filter-by-query-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/filter-by-query-test.js should pass jshint', function() { \n    ok(true, 'unit/filter-by-query-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-cli-filter-by-query\",\"version\":\"1.0.2.73d6412e\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}